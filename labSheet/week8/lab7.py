"""USE: python <PROGNAME> (options) csv_datafileOPTIONS:    -h : print this help message and exit    -e : process pictographic emojis (default: False)"""# Author: Tomas Goldsack################################################################import sys, re, getopt, csv, nltkopts, args = getopt.getopt(sys.argv[1:], 'he')opts = dict(opts)process_emojis = Falsedef printHelp():    progname = sys.argv[0]    progname = progname.split('/')[-1] # strip out extended path    help = __doc__.replace('<PROGNAME>', progname, 1)    print('-' * 60, help, '-' * 60, file = sys.stderr)    sys.exit()if '-h' in opts:    printHelp()if '-e' in opts:    process_emojis = Trueif len(args) < 1:    print("\n** ERROR: no arg files provided **", file=sys.stderr)    printHelp()if len(args) > 1:    print("\n** ERROR: too many arg files provided **", file=sys.stderr)    printHelp()if not args[0].endswith(".csv"):    print("\n** ERROR: arg file should be in csv format **", file=sys.stderr)    printHelp()filename = args[0]################################################################def tokenise_regex(text):    ''' Tokenenise a string using a Regular Expression '''    pattern = r"\w+(?:'\w+)?|[^\w\s]"    return re.findall(pattern, text)def lowercase_regex(text):    ''' Lowercase a string using a Regular Expression '''    return re.sub(r"[A-Z]", lambda x: x.group(0).lower(), text)tweets = set()with open(filename, 'r', encoding='UTF-8') as in_file:    reader = csv.reader(in_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)    for row in reader:        list = [row[0],row[1]]        text = tokenise_regex(lowercase_regex(row[2]))        list.append(text)        tweets.add(list)        print(f"Loaded {len(tweets)} tweets.")# PMI(x,y) = log2 (P(x,y) / P(x)P(y))# C(x): number of tweets containing x.# C(y): number of tweets containing y .# C(x,y): number of tweets where x and y co-occur.# N: total number of tweetsn = len(tweets)