"""USE: python <PROGNAME> (options) csv_datafileOPTIONS:    -h : print this help message and exit    -e : process pictographic emojis (default: False)"""# Author: Tomas Goldsack################################################################import sys, re, getopt, csv, nltkopts, args = getopt.getopt(sys.argv[1:], 'he')opts = dict(opts)process_emojis = Falsedef printHelp():    progname = sys.argv[0]    progname = progname.split('/')[-1] # strip out extended path    help = __doc__.replace('<PROGNAME>', progname, 1)    print('-' * 60, help, '-' * 60, file = sys.stderr)    sys.exit()if '-h' in opts:    printHelp()if '-e' in opts:    process_emojis = Trueif len(args) < 1:    print("\n** ERROR: no arg files provided **", file=sys.stderr)    printHelp()if len(args) > 1:    print("\n** ERROR: too many arg files provided **", file=sys.stderr)    printHelp()if not args[0].endswith(".csv"):    print("\n** ERROR: arg file should be in csv format **", file=sys.stderr)    printHelp()filename = args[0]################################################################# Read in text column from csv filetweets = []with open(filename, 'r', encoding='UTF-8') as in_file:    reader = csv.reader(in_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)    for row in reader:        tweets.append(row[2])print(f"Loaded {len(tweets)} tweets.")def preprocess_tweet(text, include_emojis=False):    ''' Replace tweet elements with normalised tags '''    mention_pattern = r"@[a-zA-Z0-9_]{0,15}"    hashtag_pattern =  r"#(\w+)"    emoticon_pattern = r"(\:\w+\:|\<[\/\\]?3|[\(\)\\\D|\*\$][\-\^]?[\:\;\=]|[\:\;\=B8][\-\^]?[3DOPp\@\$\*\\\)\(\/\|])(?=\s|[\!\.\?]|$)"    # ^source: https://stackoverflow.com/questions/28077049/regex-matching-emoticons    emoji_pattern = re.compile(pattern = "["        u"\U0001F600-\U0001F64F"  # Emoticons        u"\U0001F300-\U0001F5FF"  # Symbols & pictographs        u"\U0001FAC0-\U0001FaFF"  # Symbols & pictographs extended A        u"\U00012600-\U000126FF"  # Miscellaneous Symbols        u"\U00002700-\U000027BF"  # Dingbats        u"\U0001F100-\U0001F1FF"  # Enclosed Alphanumeric Supplement        u"\U0001F680-\U0001F6FF"  # Transport & Map symbols        u"\U0001F1E0-\U0001F1FF"  # Flags        u"\U00002190-\U000021FF"  # Arrows                           "]+", flags = re.UNICODE)     processed_tweet = re.sub(emoticon_pattern, "<EMOTICONS>", \                      re.sub(hashtag_pattern, "<HASHTAGS>", \                      re.sub(mention_pattern, "<MENTIONS>", text)))     if include_emojis:        processed_tweet = emoji_pattern.sub("<EMOJIS>", processed_tweet)        return processed_tweetprocessedTweets = []for tweet in tweets:    processedTweets.append(preprocess_tweet(tweet))# PMI(x,y) = log2 (P(x,y) / P(x)P(y))# C(x): number of tweets containing x.# C(y): number of tweets containing y .# C(x,y): number of tweets where x and y co-occur.# N: total number of tweetsn = len(tweets)